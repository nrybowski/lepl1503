accessible: true
author: Maxime Mawait & Nicolas Rybowski
categories:
- s3
- category_linked_list
- category_malloc
- category_struct
- level3
contact_url: ''
context: |+
    We ask you to write two simple functions that are  needed to implement a simple linked list.


    .. code-block:: c

        /**
        * Structure node
        *
        * @next: pointer to the next node in the list, NULL if last node_t
        * @value: value stored in the node
        */
        typedef struct node {
          struct node *next;
          int value;
        } node_t;

        /**
        * Structure list
        *
        * @first: first node of the list, NULL if list is empty
        * @size: number of nodes in the list
        */
        typedef struct list {
          struct node *first;
          int size;
        } list_t;

    **In your functions, you cannot use the function** `calloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_

    NB : Do not forget to verify the returned value of malloc and don't forget to manage the error cases as mentioned in the following specifications.

environment_id: cpp
environment_parameters:
    limits:
        memory: '100'
        hard_time: ''
        time: '30'
    run_cmd: ''
environment_type: docker
evaluate: best
file: ''
groups: false
input_random: '0'
name: '[S3] Simple linked list '
network_grading: false
order: 23
problems:
    init_node:
        name: Node initialisation
        default: ''
        header: |
            .. code-block:: c

                /*
                * Create a new node containing the value @value.
                *
                * @value: value stored in the node
                * @next : pointer to next node, initialised to NULL.
                * @return: returns the pointer to the newly created node, or NULL if an error occured.
                */
                node_t *init_node(int value) {
        language: c
        type: code
    add_node:
        language: c
        type: code
        name: Adding a node
        header: |
            .. code-block:: c

                /*
                * Add a node at the head of the list @list and increment the number of nodes in the list (member `size`)
                *
                * @l: linked list
                * @value: value to add to the list
                *
                * @return: 0 if success, 1 otherwise
                */
                int add_node(list_t *list, int value) {

            //**Hint** : Don't hesitate to reuse the function you defined above !
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
