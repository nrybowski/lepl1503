accessible: true
author: Félix Ruyffelaere Anthony Doeraene
categories: []
contact_url: ''
context: |-
    .. role::c(code)
        :language: c

    Vous devez écrire deux fonctions qui vont respectivement :c:`map` et :c:`filter` une linked list selon le même principe que les stream en java, c'est à dire à partir d'une fonction passée en argument.

    Voici les définitions des structures que vous devrez utiliser:

    .. code-block:: c

        typedef struct node {
          struct node *next;
          int value;
        } node_t;

        typedef struct list {
          struct node *first;
          int size;
        } list_t;
environment_id: cpp
environment_parameters:
    limits:
        time: '30'
        hard_time: ''
        memory: '100'
    run_cmd: ''
environment_type: docker
evaluate: best
file: ''
groups: false
input_random: 0
name: Streams
network_grading: false
problems:
    map:
        type: code
        name: Map
        header: |4-

                .. code-block:: c

                    /**
                     * @brief Applies the function 'f' to all the elements of the linked list.
                     *
                     * @param list: A pointer to a linked list.
                     * @param f: A functions that return the new value generated from the old one that must be put in the node.
                     */
                    void map(list_t *list, int (*f)(int));
        language: c
        default: ''
    filter:
        type: code
        name: Filter
        header: |-
            .. code-block:: c

                **
                 * @brief Filters a linked list according to the predicate 'f', which will return 0 if the node has to be deleted, 1 otherwise.
                 * Elements that don't match are thus deleted, don't forget to free when removing them from the linked list.
                 * If none of the elements match the predicate, the first node of the list should be set to 'NULL'.
                 *
                 * @param list: A pointer to a linked list.
                 * @param f: predicate, takes an int as argument and returns 1 if the value matches the predicate, 0 otherwise.
                 */
                void filter(list_t *list, int (*f)(int));
        language: c
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
