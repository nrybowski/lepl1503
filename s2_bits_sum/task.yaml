accessible: true
author: Arthur van Stratum
categories:
- s2
- level1
- category_bit
contact_url: ''
context: |-
    In this exercise, we will work with operation on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...

    In C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.

    This exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.

    For this, C introduces a new class of variable types :

    - *int8_t* (signed integer of 8 bits)
    - *uint8_t* (unsigned integer of 8 bits)
    - *uint16_t* (unsigned integer of 16 bits)

    You can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>
environment_id: cpp
environment_parameters:
    limits:
        memory: '100'
        hard_time: ''
        time: '30'
    run_cmd: ''
environment_type: docker
evaluate: best
file: ''
groups: false
input_random: '0'
name: '[S2] Bitwise operation: counting set bits '
network_grading: false
order: 12
problems:
    q1:
        language: c
        name: ''
        header: |-
            Write the body of a function that counts the number of bits set to ``1`` in its parameter :

            For example, with bytes you should obtain the following results:

            .. code-block:: c

               nbits(0b00000100) == 1;
               nbits(0b00000111) == 3;
               nbits(0b00001010) == 2;

            .. code-block:: c

                #include <stdint.h>
                uint8_t nbits(uint32_t n) {
        default: ''
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 0.0
